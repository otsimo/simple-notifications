// Code generated by protoc-gen-gogo.
// source: catalog.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CatalogCategory int32

const (
	CatalogCategory_NONE             CatalogCategory = 0
	CatalogCategory_FEATURED         CatalogCategory = 1
	CatalogCategory_NEW              CatalogCategory = 2
	CatalogCategory_RECOMMENDATION   CatalogCategory = 3
	CatalogCategory_POPULAR          CatalogCategory = 4
	CatalogCategory_RECENTLY_UPDATED CatalogCategory = 5
)

var CatalogCategory_name = map[int32]string{
	0: "NONE",
	1: "FEATURED",
	2: "NEW",
	3: "RECOMMENDATION",
	4: "POPULAR",
	5: "RECENTLY_UPDATED",
}
var CatalogCategory_value = map[string]int32{
	"NONE":             0,
	"FEATURED":         1,
	"NEW":              2,
	"RECOMMENDATION":   3,
	"POPULAR":          4,
	"RECENTLY_UPDATED": 5,
}

func (x CatalogCategory) String() string {
	return proto.EnumName(CatalogCategory_name, int32(x))
}
func (CatalogCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptorCatalog, []int{0} }

type CatalogStatus int32

const (
	CatalogStatus_DRAFT    CatalogStatus = 0
	CatalogStatus_APPROVED CatalogStatus = 1
)

var CatalogStatus_name = map[int32]string{
	0: "DRAFT",
	1: "APPROVED",
}
var CatalogStatus_value = map[string]int32{
	"DRAFT":    0,
	"APPROVED": 1,
}

func (x CatalogStatus) String() string {
	return proto.EnumName(CatalogStatus_name, int32(x))
}
func (CatalogStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorCatalog, []int{1} }

type CatalogListRequest_ListStatus int32

const (
	CatalogListRequest_BOTH          CatalogListRequest_ListStatus = 0
	CatalogListRequest_ONLY_DRAFT    CatalogListRequest_ListStatus = 1
	CatalogListRequest_ONLY_APPROVED CatalogListRequest_ListStatus = 2
)

var CatalogListRequest_ListStatus_name = map[int32]string{
	0: "BOTH",
	1: "ONLY_DRAFT",
	2: "ONLY_APPROVED",
}
var CatalogListRequest_ListStatus_value = map[string]int32{
	"BOTH":          0,
	"ONLY_DRAFT":    1,
	"ONLY_APPROVED": 2,
}

func (x CatalogListRequest_ListStatus) String() string {
	return proto.EnumName(CatalogListRequest_ListStatus_name, int32(x))
}
func (CatalogListRequest_ListStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCatalog, []int{3, 0}
}

type CatalogItem struct {
	GameId   string          `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Category CatalogCategory `protobuf:"varint,2,opt,name=category,proto3,enum=apipb.CatalogCategory" json:"category,omitempty"`
	Index    int32           `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *CatalogItem) Reset()                    { *m = CatalogItem{} }
func (m *CatalogItem) String() string            { return proto.CompactTextString(m) }
func (*CatalogItem) ProtoMessage()               {}
func (*CatalogItem) Descriptor() ([]byte, []int) { return fileDescriptorCatalog, []int{0} }

type Catalog struct {
	Title     string         `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	CreatedAt int64          `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	VisibleAt int64          `protobuf:"varint,3,opt,name=visible_at,json=visibleAt,proto3" json:"visible_at,omitempty"`
	ExpiresAt int64          `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Status    CatalogStatus  `protobuf:"varint,5,opt,name=status,proto3,enum=apipb.CatalogStatus" json:"status,omitempty"`
	Items     []*CatalogItem `protobuf:"bytes,9,rep,name=items" json:"items,omitempty"`
}

func (m *Catalog) Reset()                    { *m = Catalog{} }
func (m *Catalog) String() string            { return proto.CompactTextString(m) }
func (*Catalog) ProtoMessage()               {}
func (*Catalog) Descriptor() ([]byte, []int) { return fileDescriptorCatalog, []int{1} }

// Request-Response
type CatalogPullRequest struct {
	ProfileId     string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ClientVersion string `protobuf:"bytes,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (m *CatalogPullRequest) Reset()                    { *m = CatalogPullRequest{} }
func (m *CatalogPullRequest) String() string            { return proto.CompactTextString(m) }
func (*CatalogPullRequest) ProtoMessage()               {}
func (*CatalogPullRequest) Descriptor() ([]byte, []int) { return fileDescriptorCatalog, []int{2} }

type CatalogListRequest struct {
	Status      CatalogListRequest_ListStatus `protobuf:"varint,1,opt,name=status,proto3,enum=apipb.CatalogListRequest_ListStatus" json:"status,omitempty"`
	HideExpired bool                          `protobuf:"varint,2,opt,name=hide_expired,json=hideExpired,proto3" json:"hide_expired,omitempty"`
	Limit       int32                         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Time        int64                         `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Offset      int32                         `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *CatalogListRequest) Reset()                    { *m = CatalogListRequest{} }
func (m *CatalogListRequest) String() string            { return proto.CompactTextString(m) }
func (*CatalogListRequest) ProtoMessage()               {}
func (*CatalogListRequest) Descriptor() ([]byte, []int) { return fileDescriptorCatalog, []int{3} }

type CatalogListResponse struct {
	Catalogs []*Catalog `protobuf:"bytes,1,rep,name=catalogs" json:"catalogs,omitempty"`
}

func (m *CatalogListResponse) Reset()                    { *m = CatalogListResponse{} }
func (m *CatalogListResponse) String() string            { return proto.CompactTextString(m) }
func (*CatalogListResponse) ProtoMessage()               {}
func (*CatalogListResponse) Descriptor() ([]byte, []int) { return fileDescriptorCatalog, []int{4} }

type CatalogApproveRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *CatalogApproveRequest) Reset()                    { *m = CatalogApproveRequest{} }
func (m *CatalogApproveRequest) String() string            { return proto.CompactTextString(m) }
func (*CatalogApproveRequest) ProtoMessage()               {}
func (*CatalogApproveRequest) Descriptor() ([]byte, []int) { return fileDescriptorCatalog, []int{5} }

func init() {
	proto.RegisterType((*CatalogItem)(nil), "apipb.CatalogItem")
	proto.RegisterType((*Catalog)(nil), "apipb.Catalog")
	proto.RegisterType((*CatalogPullRequest)(nil), "apipb.CatalogPullRequest")
	proto.RegisterType((*CatalogListRequest)(nil), "apipb.CatalogListRequest")
	proto.RegisterType((*CatalogListResponse)(nil), "apipb.CatalogListResponse")
	proto.RegisterType((*CatalogApproveRequest)(nil), "apipb.CatalogApproveRequest")
	proto.RegisterEnum("apipb.CatalogCategory", CatalogCategory_name, CatalogCategory_value)
	proto.RegisterEnum("apipb.CatalogStatus", CatalogStatus_name, CatalogStatus_value)
	proto.RegisterEnum("apipb.CatalogListRequest_ListStatus", CatalogListRequest_ListStatus_name, CatalogListRequest_ListStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CatalogService service

type CatalogServiceClient interface {
	Pull(ctx context.Context, in *CatalogPullRequest, opts ...grpc.CallOption) (*Catalog, error)
	Push(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *CatalogListRequest, opts ...grpc.CallOption) (*CatalogListResponse, error)
	Approve(ctx context.Context, in *CatalogApproveRequest, opts ...grpc.CallOption) (*Response, error)
}

type catalogServiceClient struct {
	cc *grpc.ClientConn
}

func NewCatalogServiceClient(cc *grpc.ClientConn) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) Pull(ctx context.Context, in *CatalogPullRequest, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := grpc.Invoke(ctx, "/apipb.CatalogService/Pull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) Push(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.CatalogService/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) List(ctx context.Context, in *CatalogListRequest, opts ...grpc.CallOption) (*CatalogListResponse, error) {
	out := new(CatalogListResponse)
	err := grpc.Invoke(ctx, "/apipb.CatalogService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) Approve(ctx context.Context, in *CatalogApproveRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.CatalogService/Approve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CatalogService service

type CatalogServiceServer interface {
	Pull(context.Context, *CatalogPullRequest) (*Catalog, error)
	Push(context.Context, *Catalog) (*Response, error)
	List(context.Context, *CatalogListRequest) (*CatalogListResponse, error)
	Approve(context.Context, *CatalogApproveRequest) (*Response, error)
}

func RegisterCatalogServiceServer(s *grpc.Server, srv CatalogServiceServer) {
	s.RegisterService(&_CatalogService_serviceDesc, srv)
}

func _CatalogService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.CatalogService/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Pull(ctx, req.(*CatalogPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.CatalogService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Push(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.CatalogService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).List(ctx, req.(*CatalogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.CatalogService/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Approve(ctx, req.(*CatalogApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CatalogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pull",
			Handler:    _CatalogService_Pull_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _CatalogService_Push_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CatalogService_List_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _CatalogService_Approve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorCatalog,
}

func (m *CatalogItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CatalogItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintCatalog(data, i, uint64(len(m.GameId)))
		i += copy(data[i:], m.GameId)
	}
	if m.Category != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCatalog(data, i, uint64(m.Category))
	}
	if m.Index != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCatalog(data, i, uint64(m.Index))
	}
	return i, nil
}

func (m *Catalog) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Catalog) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintCatalog(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if m.CreatedAt != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCatalog(data, i, uint64(m.CreatedAt))
	}
	if m.VisibleAt != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCatalog(data, i, uint64(m.VisibleAt))
	}
	if m.ExpiresAt != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintCatalog(data, i, uint64(m.ExpiresAt))
	}
	if m.Status != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintCatalog(data, i, uint64(m.Status))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0x4a
			i++
			i = encodeVarintCatalog(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CatalogPullRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CatalogPullRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProfileId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintCatalog(data, i, uint64(len(m.ProfileId)))
		i += copy(data[i:], m.ProfileId)
	}
	if len(m.ClientVersion) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintCatalog(data, i, uint64(len(m.ClientVersion)))
		i += copy(data[i:], m.ClientVersion)
	}
	return i, nil
}

func (m *CatalogListRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CatalogListRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintCatalog(data, i, uint64(m.Status))
	}
	if m.HideExpired {
		data[i] = 0x10
		i++
		if m.HideExpired {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Limit != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCatalog(data, i, uint64(m.Limit))
	}
	if m.Time != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintCatalog(data, i, uint64(m.Time))
	}
	if m.Offset != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintCatalog(data, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *CatalogListResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CatalogListResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Catalogs) > 0 {
		for _, msg := range m.Catalogs {
			data[i] = 0xa
			i++
			i = encodeVarintCatalog(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CatalogApproveRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CatalogApproveRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintCatalog(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	return i, nil
}

func encodeFixed64Catalog(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Catalog(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCatalog(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *CatalogItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovCatalog(uint64(m.Category))
	}
	if m.Index != 0 {
		n += 1 + sovCatalog(uint64(m.Index))
	}
	return n
}

func (m *Catalog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovCatalog(uint64(m.CreatedAt))
	}
	if m.VisibleAt != 0 {
		n += 1 + sovCatalog(uint64(m.VisibleAt))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovCatalog(uint64(m.ExpiresAt))
	}
	if m.Status != 0 {
		n += 1 + sovCatalog(uint64(m.Status))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	return n
}

func (m *CatalogPullRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	return n
}

func (m *CatalogListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCatalog(uint64(m.Status))
	}
	if m.HideExpired {
		n += 2
	}
	if m.Limit != 0 {
		n += 1 + sovCatalog(uint64(m.Limit))
	}
	if m.Time != 0 {
		n += 1 + sovCatalog(uint64(m.Time))
	}
	if m.Offset != 0 {
		n += 1 + sovCatalog(uint64(m.Offset))
	}
	return n
}

func (m *CatalogListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Catalogs) > 0 {
		for _, e := range m.Catalogs {
			l = e.Size()
			n += 1 + l + sovCatalog(uint64(l))
		}
	}
	return n
}

func (m *CatalogApproveRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCatalog(uint64(l))
	}
	return n
}

func sovCatalog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCatalog(x uint64) (n int) {
	return sovCatalog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CatalogItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Category |= (CatalogCategory(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Catalog) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Catalog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Catalog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibleAt", wireType)
			}
			m.VisibleAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.VisibleAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpiresAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (CatalogStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CatalogItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogPullRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogPullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogPullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogListRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (CatalogListRequest_ListStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideExpired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideExpired = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogListResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Catalogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Catalogs = append(m.Catalogs, &Catalog{})
			if err := m.Catalogs[len(m.Catalogs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatalogApproveRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogApproveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogApproveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCatalog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCatalog(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCatalog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCatalog(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCatalog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCatalog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCatalog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCatalog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCatalog(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCatalog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCatalog   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorCatalog = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0x5d, 0x6e, 0xea, 0x46,
	0x14, 0xc6, 0x80, 0xf9, 0x39, 0x04, 0xe2, 0x4e, 0xd3, 0x94, 0xa2, 0x16, 0x51, 0xd4, 0xaa, 0x28,
	0x6a, 0x88, 0x4a, 0x1f, 0xda, 0x4a, 0xed, 0x83, 0x03, 0x8e, 0x8a, 0x44, 0x30, 0x9a, 0x90, 0x54,
	0xc9, 0x0b, 0x32, 0x66, 0x70, 0x46, 0xb2, 0xb1, 0xeb, 0x19, 0x50, 0xba, 0x8b, 0xae, 0xa1, 0xab,
	0xc9, 0x63, 0x1f, 0xba, 0x80, 0x36, 0xd5, 0xdd, 0xc0, 0x5d, 0xc1, 0xd5, 0x8c, 0x07, 0x2e, 0xe6,
	0xe6, 0xcd, 0xdf, 0xf7, 0x9d, 0x99, 0x33, 0xdf, 0x77, 0x8e, 0x0c, 0x55, 0xd7, 0xe1, 0x8e, 0x1f,
	0x7a, 0xdd, 0x28, 0x0e, 0x79, 0x88, 0x74, 0x27, 0xa2, 0xd1, 0xbc, 0x51, 0x0b, 0x08, 0x63, 0x8e,
	0x47, 0x58, 0x42, 0x37, 0xce, 0x3d, 0xca, 0x1f, 0xd7, 0xf3, 0xae, 0x1b, 0x06, 0x17, 0x5e, 0xe8,
	0x85, 0x17, 0x92, 0x9e, 0xaf, 0x97, 0x12, 0x49, 0x20, 0xbf, 0x92, 0xf2, 0x76, 0x04, 0x95, 0x7e,
	0x72, 0xed, 0x90, 0x93, 0x00, 0x7d, 0x0a, 0x45, 0xcf, 0x09, 0xc8, 0x8c, 0x2e, 0xea, 0x5a, 0x4b,
	0xeb, 0x94, 0x71, 0x41, 0xc0, 0xe1, 0x02, 0xf5, 0xa0, 0xe4, 0x3a, 0x9c, 0x78, 0x61, 0xfc, 0x47,
	0x3d, 0xdb, 0xd2, 0x3a, 0xb5, 0xde, 0x69, 0x57, 0x3e, 0xa0, 0xab, 0x8e, 0xf7, 0x95, 0x8a, 0x77,
	0x75, 0xe8, 0x04, 0x74, 0xba, 0x5a, 0x90, 0xa7, 0x7a, 0xae, 0xa5, 0x75, 0x74, 0x9c, 0x80, 0xf6,
	0x3f, 0x1a, 0x14, 0xd5, 0x19, 0x51, 0xc1, 0x29, 0xf7, 0x89, 0x6a, 0x96, 0x00, 0xf4, 0x05, 0x80,
	0x1b, 0x13, 0x87, 0x93, 0xc5, 0xcc, 0xe1, 0xb2, 0x5b, 0x0e, 0x97, 0x15, 0x63, 0x72, 0x21, 0x6f,
	0x28, 0xa3, 0x73, 0x9f, 0x08, 0x39, 0x97, 0xc8, 0x8a, 0x49, 0x64, 0xf2, 0x14, 0xd1, 0x98, 0x30,
	0x21, 0xe7, 0x13, 0x59, 0x31, 0x26, 0x47, 0xdf, 0x42, 0x81, 0x71, 0x87, 0xaf, 0x59, 0x5d, 0x97,
	0x36, 0x4e, 0xd2, 0x36, 0x6e, 0xa4, 0x86, 0x55, 0x0d, 0xea, 0x80, 0x4e, 0x39, 0x09, 0x58, 0xbd,
	0xdc, 0xca, 0x75, 0x2a, 0x3d, 0x94, 0x2e, 0x16, 0x91, 0xe1, 0xa4, 0xa0, 0xfd, 0x00, 0x48, 0xb1,
	0x93, 0xb5, 0xef, 0x63, 0xf2, 0xfb, 0x9a, 0x30, 0xf9, 0x98, 0x28, 0x0e, 0x97, 0xd4, 0xdf, 0x8b,
	0xb4, 0xac, 0x98, 0xe1, 0x02, 0x7d, 0x0d, 0x35, 0xd7, 0xa7, 0x64, 0xc5, 0x67, 0x1b, 0x12, 0x33,
	0x1a, 0xae, 0xa4, 0xdb, 0x32, 0xae, 0x26, 0xec, 0x5d, 0x42, 0xb6, 0xdf, 0x6a, 0xbb, 0xcb, 0x47,
	0x94, 0xf1, 0xed, 0xe5, 0x3f, 0xef, 0xac, 0x68, 0xd2, 0xca, 0x57, 0xe9, 0xd7, 0xed, 0x95, 0x76,
	0xc5, 0xf7, 0x81, 0xb5, 0x2f, 0xe1, 0xe8, 0x91, 0x2e, 0xc8, 0x2c, 0x89, 0x66, 0x21, 0x3b, 0x97,
	0x70, 0x45, 0x70, 0x56, 0x42, 0x89, 0xf1, 0xf8, 0x34, 0xa0, 0x7c, 0x3b, 0x40, 0x09, 0x10, 0x82,
	0x3c, 0xa7, 0x01, 0x51, 0xd1, 0xca, 0x6f, 0x74, 0x0a, 0x85, 0x70, 0xb9, 0x64, 0x84, 0xcb, 0x54,
	0x75, 0xac, 0x50, 0xfb, 0x27, 0x80, 0xf7, 0xad, 0x51, 0x09, 0xf2, 0x97, 0xf6, 0xf4, 0x57, 0x23,
	0x83, 0x6a, 0x00, 0xf6, 0x78, 0x74, 0x3f, 0x1b, 0x60, 0xf3, 0x6a, 0x6a, 0x68, 0xe8, 0x23, 0xa8,
	0x4a, 0x6c, 0x4e, 0x26, 0xd8, 0xbe, 0xb3, 0x06, 0x46, 0xb6, 0x6d, 0xc2, 0xc7, 0x29, 0x23, 0x2c,
	0x0a, 0x57, 0x8c, 0xa0, 0x33, 0xb9, 0x88, 0x82, 0x16, 0xb6, 0xc5, 0x50, 0x6a, 0x69, 0xdb, 0x78,
	0xa7, 0xb7, 0xcf, 0xe1, 0x13, 0x45, 0x9a, 0x51, 0x14, 0x87, 0x1b, 0xb2, 0x4d, 0xee, 0xd5, 0xbd,
	0x3b, 0xa3, 0x70, 0x7c, 0xb0, 0xcc, 0xe2, 0xc5, 0x63, 0x7b, 0x6c, 0x19, 0x19, 0x74, 0x04, 0xa5,
	0x2b, 0xcb, 0x9c, 0xde, 0x62, 0x6b, 0x60, 0x68, 0xa8, 0x08, 0xb9, 0xb1, 0xf5, 0x9b, 0x91, 0x45,
	0x08, 0x6a, 0xd8, 0xea, 0xdb, 0xd7, 0xd7, 0xd6, 0x78, 0x60, 0x4e, 0x87, 0xf6, 0xd8, 0xc8, 0xa1,
	0x0a, 0x14, 0x27, 0xf6, 0xe4, 0x76, 0x64, 0x62, 0x23, 0x8f, 0x4e, 0xc0, 0xc0, 0x56, 0xdf, 0x1a,
	0x4f, 0x47, 0xf7, 0xb3, 0xdb, 0xc9, 0xc0, 0x9c, 0x5a, 0x03, 0x43, 0x3f, 0xeb, 0x40, 0x35, 0xb5,
	0x70, 0xa8, 0x0c, 0x7a, 0x92, 0x85, 0xec, 0xb4, 0x8b, 0x41, 0xeb, 0xbd, 0xd1, 0xa0, 0xb6, 0x2d,
	0x25, 0xf1, 0x86, 0xba, 0x04, 0x7d, 0x07, 0x79, 0xb1, 0x63, 0xe8, 0xb3, 0xb4, 0xf1, 0xbd, 0xbd,
	0x6b, 0x1c, 0x64, 0x82, 0xbe, 0x11, 0x47, 0xd8, 0x23, 0x3a, 0xe0, 0x1b, 0xc7, 0x0a, 0xef, 0xe2,
	0xfd, 0x05, 0xf2, 0x22, 0xee, 0xc3, 0xbb, 0xf7, 0x76, 0xa9, 0xd1, 0x78, 0x4d, 0x52, 0xc7, 0x7f,
	0x84, 0xa2, 0x8a, 0x1a, 0x7d, 0x9e, 0x2e, 0x4b, 0x4f, 0xe0, 0x83, 0xc6, 0x97, 0x3f, 0x3c, 0xff,
	0xd7, 0xcc, 0x3c, 0xbf, 0x34, 0xb5, 0xbf, 0x5f, 0x9a, 0xda, 0xbf, 0x2f, 0x4d, 0xed, 0xcf, 0xff,
	0x9b, 0x19, 0x38, 0x76, 0xc3, 0xa0, 0x1b, 0x72, 0x46, 0x83, 0xb0, 0xeb, 0xc5, 0x91, 0x3b, 0xd1,
	0x1e, 0x4a, 0x09, 0x8c, 0xe6, 0x7f, 0x65, 0x73, 0xf6, 0xf4, 0x66, 0x5e, 0x90, 0x3f, 0xb2, 0xef,
	0xdf, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xb0, 0x3a, 0xeb, 0x1f, 0x05, 0x00, 0x00,
}
