// Code generated by protoc-gen-gogo.
// source: pod.proto
// DO NOT EDIT!

package pipelinepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestRequest struct {
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptorPod, []int{0} }

type TestResponse struct {
	Actions []*PodServiceAction `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (m *TestResponse) Reset()                    { *m = TestResponse{} }
func (m *TestResponse) String() string            { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()               {}
func (*TestResponse) Descriptor() ([]byte, []int) { return fileDescriptorPod, []int{1} }

func init() {
	proto.RegisterType((*TestRequest)(nil), "otsimo.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "otsimo.TestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Pod service

type PodClient interface {
	Single(ctx context.Context, in *FlowIn, opts ...grpc.CallOption) (*FlowOut, error)
	FanOut(ctx context.Context, in *FlowIn, opts ...grpc.CallOption) (Pod_FanOutClient, error)
	FanIn(ctx context.Context, opts ...grpc.CallOption) (Pod_FanInClient, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type podClient struct {
	cc *grpc.ClientConn
}

func NewPodClient(cc *grpc.ClientConn) PodClient {
	return &podClient{cc}
}

func (c *podClient) Single(ctx context.Context, in *FlowIn, opts ...grpc.CallOption) (*FlowOut, error) {
	out := new(FlowOut)
	err := grpc.Invoke(ctx, "/otsimo.Pod/Single", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) FanOut(ctx context.Context, in *FlowIn, opts ...grpc.CallOption) (Pod_FanOutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pod_serviceDesc.Streams[0], c.cc, "/otsimo.Pod/FanOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &podFanOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pod_FanOutClient interface {
	Recv() (*FlowOut, error)
	grpc.ClientStream
}

type podFanOutClient struct {
	grpc.ClientStream
}

func (x *podFanOutClient) Recv() (*FlowOut, error) {
	m := new(FlowOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *podClient) FanIn(ctx context.Context, opts ...grpc.CallOption) (Pod_FanInClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Pod_serviceDesc.Streams[1], c.cc, "/otsimo.Pod/FanIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &podFanInClient{stream}
	return x, nil
}

type Pod_FanInClient interface {
	Send(*FlowIn) error
	CloseAndRecv() (*FlowOut, error)
	grpc.ClientStream
}

type podFanInClient struct {
	grpc.ClientStream
}

func (x *podFanInClient) Send(m *FlowIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *podFanInClient) CloseAndRecv() (*FlowOut, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FlowOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *podClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := grpc.Invoke(ctx, "/otsimo.Pod/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pod service

type PodServer interface {
	Single(context.Context, *FlowIn) (*FlowOut, error)
	FanOut(*FlowIn, Pod_FanOutServer) error
	FanIn(Pod_FanInServer) error
	Test(context.Context, *TestRequest) (*TestResponse, error)
}

func RegisterPodServer(s *grpc.Server, srv PodServer) {
	s.RegisterService(&_Pod_serviceDesc, srv)
}

func _Pod_Single_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).Single(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.Pod/Single",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).Single(ctx, req.(*FlowIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_FanOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlowIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PodServer).FanOut(m, &podFanOutServer{stream})
}

type Pod_FanOutServer interface {
	Send(*FlowOut) error
	grpc.ServerStream
}

type podFanOutServer struct {
	grpc.ServerStream
}

func (x *podFanOutServer) Send(m *FlowOut) error {
	return x.ServerStream.SendMsg(m)
}

func _Pod_FanIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PodServer).FanIn(&podFanInServer{stream})
}

type Pod_FanInServer interface {
	SendAndClose(*FlowOut) error
	Recv() (*FlowIn, error)
	grpc.ServerStream
}

type podFanInServer struct {
	grpc.ServerStream
}

func (x *podFanInServer) SendAndClose(m *FlowOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *podFanInServer) Recv() (*FlowIn, error) {
	m := new(FlowIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pod_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otsimo.Pod/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pod_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimo.Pod",
	HandlerType: (*PodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Single",
			Handler:    _Pod_Single_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Pod_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FanOut",
			Handler:       _Pod_FanOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FanIn",
			Handler:       _Pod_FanIn_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorPod,
}

func (m *TestRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TestRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TestResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TestResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			data[i] = 0xa
			i++
			i = encodeVarintPod(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Pod(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pod(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPod(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *TestRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TestResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovPod(uint64(l))
		}
	}
	return n
}

func sovPod(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPod(x uint64) (n int) {
	return sovPod(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPod(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPod
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &PodServiceAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPod(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPod(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPod
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPod
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPod
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPod(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPod = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPod   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pod.proto", fileDescriptorPod) }

var fileDescriptorPod = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xc8, 0x4f, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0x2f, 0x29, 0xce, 0xcc, 0xcd, 0x97, 0xd2, 0x4d,
	0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07,
	0x4b, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0x26, 0xc5, 0x95, 0x96, 0x93,
	0x5f, 0x0e, 0x61, 0x2b, 0xf1, 0x72, 0x71, 0x87, 0xa4, 0x16, 0x97, 0x04, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x28, 0x39, 0x71, 0xf1, 0x40, 0xb8, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x46,
	0x5c, 0xec, 0x89, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46,
	0x12, 0x7a, 0x10, 0x3b, 0xf5, 0x02, 0xf2, 0x53, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x1d,
	0xc1, 0x0a, 0x82, 0x60, 0x0a, 0x8d, 0xf6, 0x30, 0x72, 0x31, 0x07, 0xe4, 0xa7, 0x08, 0x69, 0x72,
	0xb1, 0x05, 0x67, 0xe6, 0xa5, 0xe7, 0xa4, 0x0a, 0xf1, 0xc1, 0x34, 0xb9, 0xe5, 0xe4, 0x97, 0x7b,
	0xe6, 0x49, 0xf1, 0x23, 0xf3, 0xfd, 0x4b, 0x4b, 0x84, 0xb4, 0xb9, 0xd8, 0xdc, 0x12, 0xf3, 0x40,
	0x2c, 0x42, 0x4a, 0x0d, 0x18, 0x85, 0xb4, 0xb8, 0x58, 0xdd, 0x12, 0xf3, 0x3c, 0xf3, 0x08, 0xaa,
	0xd5, 0x60, 0x14, 0x32, 0xe4, 0x62, 0x01, 0xf9, 0x47, 0x48, 0x18, 0x26, 0x85, 0xe4, 0x59, 0x29,
	0x11, 0x54, 0x41, 0x88, 0x97, 0x9d, 0x34, 0x4e, 0x3c, 0x94, 0x63, 0xb8, 0xf0, 0x50, 0x8e, 0xe1,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e,
	0x61, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xae, 0x82, 0xcc, 0x82, 0xd4, 0x9c, 0xcc, 0xbc, 0xd4, 0x82,
	0xa4, 0x24, 0x36, 0x70, 0x10, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x0a, 0x8b, 0xe9,
	0x92, 0x01, 0x00, 0x00,
}
