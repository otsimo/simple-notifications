// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package notification is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Target
	Message
	SendMessageResponse
*/
package notification

import proto "github.com/golang/protobuf/proto"
import google_protobuf "google/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Backend int32

const (
	Backend_EMAIL Backend = 0
	Backend_SMS   Backend = 1
	Backend_PUSH  Backend = 2
)

var Backend_name = map[int32]string{
	0: "EMAIL",
	1: "SMS",
	2: "PUSH",
}
var Backend_value = map[string]int32{
	"EMAIL": 0,
	"SMS":   1,
	"PUSH":  2,
}

func (x Backend) String() string {
	return proto.EnumName(Backend_name, int32(x))
}

type Target struct {
	Backend Backend                         `protobuf:"varint,1,opt,name=backend,enum=notification.Backend" json:"backend,omitempty"`
	Data    map[string]*google_protobuf.Any `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}

func (m *Target) GetData() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message struct {
	Template string    `protobuf:"bytes,1,opt,name=template" json:"template,omitempty"`
	Language string    `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	SendAt   int64     `protobuf:"varint,3,opt,name=send_at" json:"send_at,omitempty"`
	Targets  []*Target `protobuf:"bytes,4,rep,name=targets" json:"targets,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

type SendMessageResponse struct {
	Type int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *SendMessageResponse) Reset()         { *m = SendMessageResponse{} }
func (m *SendMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SendMessageResponse) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("notification.Backend", Backend_name, Backend_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for NotificationService service

type NotificationServiceClient interface {
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type notificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationServiceClient(cc *grpc.ClientConn) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := grpc.Invoke(ctx, "/notification.NotificationService/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotificationService service

type NotificationServiceServer interface {
	SendMessage(context.Context, *Message) (*SendMessageResponse, error)
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_SendMessage_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Message)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NotificationServiceServer).SendMessage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _NotificationService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
